{"version":3,"sources":["idb-promised.js","idb.js"],"names":["createIndexedDB","window","idb","open","upgradeDb","oldVersion","objectStoreNames","contains","console","log","createObjectStore","keyPath","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","p","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","this","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","promisifyCursorRequestCall","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","UpgradeDB","db","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","call","toArray","callback","length","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","name","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","module","exports","self","dbPromise","saveRestaurantsDataLocally","restaurants","tx","all","map","restaurant","put","catch","abort","Error","getLocalRestaurantsData","getLocalRestaurantByIdData","id","parseInt"],"mappings":"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","file":"idb-bundle.min.js","sourcesContent":["/*\r\nCopyright 2018 Google Inc.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n'use strict';\r\n\r\n(function() {\r\n  function toArray(arr) {\r\n    return Array.prototype.slice.call(arr);\r\n  }\r\n\r\n  function promisifyRequest(request) {\r\n    return new Promise(function(resolve, reject) {\r\n      request.onsuccess = function() {\r\n        resolve(request.result);\r\n      };\r\n\r\n      request.onerror = function() {\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  function promisifyRequestCall(obj, method, args) {\r\n    var request;\r\n    var p = new Promise(function(resolve, reject) {\r\n      request = obj[method].apply(obj, args);\r\n      promisifyRequest(request).then(resolve, reject);\r\n    });\r\n\r\n    p.request = request;\r\n    return p;\r\n  }\r\n\r\n  function promisifyCursorRequestCall(obj, method, args) {\r\n    var p = promisifyRequestCall(obj, method, args);\r\n    return p.then(function(value) {\r\n      if (!value) return;\r\n      return new Cursor(value, p.request);\r\n    });\r\n  }\r\n\r\n  function proxyProperties(ProxyClass, targetProp, properties) {\r\n    properties.forEach(function(prop) {\r\n      Object.defineProperty(ProxyClass.prototype, prop, {\r\n        get: function() {\r\n          return this[targetProp][prop];\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return this[targetProp][prop].apply(this[targetProp], arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function Index(index) {\r\n    this._index = index;\r\n  }\r\n\r\n  proxyProperties(Index, '_index', [\r\n    'name',\r\n    'keyPath',\r\n    'multiEntry',\r\n    'unique'\r\n  ]);\r\n\r\n  proxyRequestMethods(Index, '_index', IDBIndex, [\r\n    'get',\r\n    'getKey',\r\n    'getAll',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  function Cursor(cursor, request) {\r\n    this._cursor = cursor;\r\n    this._request = request;\r\n  }\r\n\r\n  proxyProperties(Cursor, '_cursor', [\r\n    'direction',\r\n    'key',\r\n    'primaryKey',\r\n    'value'\r\n  ]);\r\n\r\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\r\n    'update',\r\n    'delete'\r\n  ]);\r\n\r\n  // proxy 'next' methods\r\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\r\n    if (!(methodName in IDBCursor.prototype)) return;\r\n    Cursor.prototype[methodName] = function() {\r\n      var cursor = this;\r\n      var args = arguments;\r\n      return Promise.resolve().then(function() {\r\n        cursor._cursor[methodName].apply(cursor._cursor, args);\r\n        return promisifyRequest(cursor._request).then(function(value) {\r\n          if (!value) return;\r\n          return new Cursor(value, cursor._request);\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  function ObjectStore(store) {\r\n    this._store = store;\r\n  }\r\n\r\n  ObjectStore.prototype.createIndex = function() {\r\n    return new Index(this._store.createIndex.apply(this._store, arguments));\r\n  };\r\n\r\n  ObjectStore.prototype.index = function() {\r\n    return new Index(this._store.index.apply(this._store, arguments));\r\n  };\r\n\r\n  proxyProperties(ObjectStore, '_store', [\r\n    'name',\r\n    'keyPath',\r\n    'indexNames',\r\n    'autoIncrement'\r\n  ]);\r\n\r\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'put',\r\n    'add',\r\n    'delete',\r\n    'clear',\r\n    'get',\r\n    'getAll',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'deleteIndex'\r\n  ]);\r\n\r\n  function Transaction(idbTransaction) {\r\n    this._tx = idbTransaction;\r\n    this.complete = new Promise(function(resolve, reject) {\r\n      idbTransaction.oncomplete = function() {\r\n        resolve();\r\n      };\r\n      idbTransaction.onerror = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  Transaction.prototype.objectStore = function() {\r\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\r\n  };\r\n\r\n  proxyProperties(Transaction, '_tx', [\r\n    'objectStoreNames',\r\n    'mode'\r\n  ]);\r\n\r\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\r\n    'abort'\r\n  ]);\r\n\r\n  function UpgradeDB(db, oldVersion, transaction) {\r\n    this._db = db;\r\n    this.oldVersion = oldVersion;\r\n    this.transaction = new Transaction(transaction);\r\n  }\r\n\r\n  UpgradeDB.prototype.createObjectStore = function() {\r\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(UpgradeDB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\r\n    'deleteObjectStore',\r\n    'close'\r\n  ]);\r\n\r\n  function DB(db) {\r\n    this._db = db;\r\n  }\r\n\r\n  DB.prototype.transaction = function() {\r\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(DB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(DB, '_db', IDBDatabase, [\r\n    'close'\r\n  ]);\r\n\r\n  // Add cursor iterators\r\n  // TODO: remove this once browsers do the right thing with promises\r\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\r\n    [ObjectStore, Index].forEach(function(Constructor) {\r\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\r\n        var args = toArray(arguments);\r\n        var callback = args[args.length - 1];\r\n        var request = (this._store || this._index)[funcName].apply(this._store, args.slice(0, -1));\r\n        request.onsuccess = function() {\r\n          callback(request.result);\r\n        };\r\n      };\r\n    });\r\n  });\r\n\r\n  // polyfill getAll\r\n  [Index, ObjectStore].forEach(function(Constructor) {\r\n    if (Constructor.prototype.getAll) return;\r\n    Constructor.prototype.getAll = function(query, count) {\r\n      var instance = this;\r\n      var items = [];\r\n\r\n      return new Promise(function(resolve) {\r\n        instance.iterateCursor(query, function(cursor) {\r\n          if (!cursor) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          items.push(cursor.value);\r\n\r\n          if (count !== undefined && items.length == count) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          cursor.continue();\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  var exp = {\r\n    open: function(name, version, upgradeCallback) {\r\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\r\n      var request = p.request;\r\n\r\n      request.onupgradeneeded = function(event) {\r\n        if (upgradeCallback) {\r\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\r\n        }\r\n      };\r\n\r\n      return p.then(function(db) {\r\n        return new DB(db);\r\n      });\r\n    },\r\n    delete: function(name) {\r\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\r\n    }\r\n  };\r\n\r\n  if (typeof module !== 'undefined') {\r\n    module.exports = exp;\r\n  }\r\n  else {\r\n    self.idb = exp;\r\n  }\r\n}());\r\n","/*\r\n * IndexedDB\r\n */\r\n\r\n// Create the IndexedDB database.\r\nfunction createIndexedDB() {\r\n  // Checking for IndexedDB support.\r\n  if (!('indexedDB' in window)) {\r\n    console.log('[INFO] This browser doesn\\'t support IndexedDB.');\r\n    return null;\r\n  }\r\n  // Opening a database.\r\n  return idb.open('pwa-resto-db1', 3, function(upgradeDb) {\r\n    switch (upgradeDb.oldVersion) {\r\n      case 0:\r\n        // A placeholder case so that the switch block will\r\n        // execute when the database is first created\r\n        // (oldVersion is 0)\r\n      case 1:\r\n        // Creating object store for restaurants.\r\n        // A key path is a property that always exists and contains a unique\r\n        // value. Objects added to this store must have an id property and\r\n        // the value must be unique.\r\n        if (!upgradeDb.objectStoreNames.contains('restaurants')) {\r\n          console.log('[DEBUG] Creating a new object store for restaurants.');\r\n          const restaurantsOS =\r\n            upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\r\n        }\r\n      case 2:\r\n        // Creating object store for reviews.\r\n        if (!upgradeDb.objectStoreNames.contains('reviews')) {\r\n          console.log('[DEBUG] Creating a new object store for reviews.');\r\n          const restaurantsOS =\r\n            upgradeDb.createObjectStore('reviews', {keyPath: 'id'});\r\n        }\r\n    }\r\n  });\r\n}\r\n\r\n// Database object.\r\nconst dbPromise = createIndexedDB();\r\n\r\n/**\r\n * Write restaurants data to object store restaurants.\r\n * The saveRestaurantsDataLocally function takes an array of objects and adds\r\n * or updates each object to the IndexedDB database. The store.put operations\r\n * happen inside a Promise.all. This way if any of the put operations fail,\r\n * we can catch the error and abort the transaction. Aborting the transaction\r\n * rolls back all the changes that happened in the transaction so that if any\r\n * of the events fail to put, none of them will be added to the object store.\r\n */\r\nfunction saveRestaurantsDataLocally(restaurants) {\r\n  if (!('indexedDB' in window)) {return null;}\r\n  return dbPromise.then(db => {\r\n    const tx = db.transaction('restaurants', 'readwrite');\r\n    const store = tx.objectStore('restaurants');\r\n    // Don't use Promise.all when there's only one restaurant.\r\n    if (restaurants.length > 1) {\r\n      return Promise.all(restaurants.map(restaurant => store.put(restaurant)))\r\n      .catch(() => {\r\n        tx.abort();\r\n        throw Error('[ERROR] Restaurants were not added to the store.');\r\n      });\r\n    } else {\r\n      store.put(restaurants);\r\n    }\r\n  });\r\n}\r\n\r\n// Get restaurants data from object store restaurants.\r\nfunction getLocalRestaurantsData() {\r\n  if (!('indexedDB' in window)) {return null;}\r\n  return dbPromise.then(db => {\r\n    const tx = db.transaction('restaurants', 'readonly');\r\n    const store = tx.objectStore('restaurants');\r\n    return store.getAll();\r\n  });\r\n}\r\n\r\n// Get restaurant by id data from object store restaurants.\r\nfunction getLocalRestaurantByIdData(id) {\r\n  if (!('indexedDB' in window)) {return null;}\r\n  return dbPromise.then(db => {\r\n    const tx = db.transaction('restaurants', 'readonly');\r\n    const store = tx.objectStore('restaurants');\r\n    // Make sure you're using a number for id.\r\n    return store.get(parseInt(id));\r\n  });\r\n}\r\n"],"sourceRoot":"/source/"}